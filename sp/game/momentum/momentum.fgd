@include "base.fgd"

@BaseClass base(Trigger) = TeleTrigger
[
    target(target_destination) : "Remote Destination" : : "The entity specifying the point to which the player should be teleported."
    
    stop(choices) : "Stop player on teleport" : 1 = 
    [
        0 : "False"
        1 : "True"
    ]
    
    resetang(choices) : "Reset the player angles on teleport" : 1 =
    [
        0 : "False"
        1 : "True"
    ]
]

@BaseClass base(TeleTrigger) = HopTrigger
[
    hold(float) : "Time teleport delay" : 1.0 : "If the player is in this trigger for longer than this (in seconds), teleport them to the most recent checkpoint."
]

@SolidClass base(TeleTrigger) = trigger_momentum_teleport : "A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination. "+
    "The entity can have its Angles and Velocity reset by boolean settings." []

// Do we really need this one?
@BaseClass color(0 0 200) base(Targetname, Angles) = Weapon
[
	spawnflags(Flags) =
	[
		1 : "Start constrained" : 0
	]

	output OnPlayerUse(void) : "Fires when the player +uses this weapon"
	output OnPlayerPickup(void) : "Fires when the player picks up this weapon"
]

@SolidClass base(Trigger) = trigger_momentum_timer_start : "Trigger that starts the timer." 
[
	leavespeed(float) : "Max leave speed" : 290 : "Max speed (Units Per Second) the player will be able to leave the trigger if LIMIT LEAVE SPEED flag is set."
	spawnflags(flags) =
	[
		2 : "Limit leave speed" : 1
	]
]

@SolidClass base(Trigger) = trigger_momentum_timer_stop : "Trigger that stops the timer." []

@SolidClass base(Trigger) = trigger_momentum_timer_stage : "Starting trigger for each stage of a map. trigger_momentum_timer_start is automatically stage 1!"
[
    stage(integer) : "Stage Number" : 2 : "The stage number that correlates to the part of map. 1 is automatically set by "
]

@SolidClass base(Trigger) = trigger_momentum_timer_checkpoint : "Trigger that saves current position. Used by trigger_momentum_teleport_checkpoint." 
[
    checkpoint(integer) : "Checkpoint Number" : -1 : "An optional number to assign to this checkpoint, used by filter_activator_checkpoint."
]

@SolidClass base(TeleTrigger) = trigger_momentum_teleport_checkpoint : "Trigger that teleports to the last trigger_momentum_timer_checkpoint." []

@SolidClass base(Trigger) = trigger_momentum_resetonehop : "Trigger that resets one hops." []

@SolidClass base(HopTrigger) = trigger_momentum_onehop : "Trigger that only allows for one hop."
[
	spawnflags(flags) =
	[
		2 : "Reset hop state if player hops onto another different onehop" : 1
	]
]

@SolidClass base(HopTrigger) = trigger_momentum_multihop : "Trigger that allows for multiple hops, as long as the player hops." []

@SolidClass base(Trigger) = trigger_momentum_userinput : "Trigger that fires on user KeyPress if inside trigger."
[
	output OnKeyPressed(void) : "Fires when the desired key is pressed"
	lookedkey(choices) : "Key that fires" : "Forward" =
	[
		0 : "Forward"
		1 : "Back"
		2 : "Move Left"
		3 : "Move Right"	
	]
]

@FilterClass base(Targetname) = filter_activator_checkpoint : "Filter that checks to see if the player is at or above the given checkpoint number."
[
	checkpoint(integer) : "Minimum req. checkpoint" : -2 : "The minimum checkpoint the player needs to be at in order for the filter to accept the activator."
]

// NOT IMPLEMENTED YET
@SolidClass base(func_brush) = func_shootboost : 
	"Entity that pushes the player when hit by the momentum_gun."
[
	onTrigger(target_destination) : "Trigger name" : "" : "Trigger name the player should be in to get boosted."
	spawnflags(flags) =
	[
		2: "Ignore player +USE" : 1
	]
	
	_minlight(string) : "Minimum Light Level" : : "The minimum level of ambient light that hits this brush."
	Solidity(choices) : "Solidity" : 2 : "Used to control the solidity/collision of these brushes." =
	[
		0 : "Toggle"
		1 : "Never Solid"
		2 : "Always Solid"
	]
	excludednpc(string) : "NPC class excluded from collisions" : "" : "If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name."
	invert_exclusion(choices) : "Invert NPC class exclusion" : 0 : "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid." =
	[
		0 : "No"
		1 : "Yes"
	]	

	solidbsp(choices) : "Solid BSP" : 0 : "Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush." =
	[
		0 : "No"
		1 : "Yes"
	]	
	vrad_brush_cast_shadows(choices) : "Shadows" : 0 : "Set this if this brush casts lightmap shadows." =
	[
		0 : "No"
		1 : "Yes"
	]	
	
	input Alpha(integer) : "Sets the brush's alpha value."
	input SetExcluded( string ) : "Change the NPC class excluded from collisions"
	input SetInvert( integer ) : "Set the state of invversion for NPC class exclusion (0 or 1)"
]

