//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Physically Based Rendering shader for brushes and models
//
//==================================================================================================

// Static combos.
// STATIC: "FLASHLIGHT"                 "0..1"
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"  "0..2"
// STATIC: "LIGHTMAPPED"                "0..1"

// Dynamic combos.
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"  "0..1"
// DYNAMIC: "PIXELFOGTYPE"              "0..1"
// DYNAMIC: "NUM_LIGHTS"                "0..4"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"  "0..1"
// DYNAMIC: "FLASHLIGHTSHADOWS"         "0..1"

// Can't write fog to alpha if there is no fog.
// SKIP: ($PIXELFOGTYPE == 0) && ($WRITEWATERFOGTODESTALPHA != 0)
// We don't care about flashlight depth unless the flashlight is on.
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTSHADOWS == 1 )
// Flashlight shadow filter mode is irrelevant if there is no flashlight.
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTDEPTHFILTERMODE != 0 )

// Getting rid of the blue squiggles.
#ifndef FLASHLIGHT
#define FLASHLIGHT 0
#endif//FLASHLIGHT
#ifndef FLASHLIGHTDEPTHFILTERMODE
#define FLASHLIGHTDEPTHFILTERMODE 0
#endif//FLASHLIGHTDEPTHFILTERMODE
#ifndef LIGHTMAPPED
#define LIGHTMAPPED 0
#endif//LIGHTMAPPED
#ifndef WRITEWATERFOGTODESTALPHA
#define WRITEWATERFOGTODESTALPHA 0
#endif//WRITEWATERFOGTODESTALPHA
#ifndef PIXELFOGTYPE
#define PIXELFOGTYPE 0
#endif//PIXELFOGTYPE
#ifndef NUM_LIGHTS
#define NUM_LIGHTS 0
#endif//NUM_LIGHTS
#ifndef WRITE_DEPTH_TO_DESTALPHA
#define WRITE_DEPTH_TO_DESTALPHA 0
#endif//WRITE_DEPTH_TO_DESTALPHA
#ifndef FLASHLIGHTSHADOWS
#define FLASHLIGHTSHADOWS 0
#endif//FLASHLIGHTSHADOWS

// Includes.
#include "common_ps_fxc.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "shader_constant_register_map.h"

// Registers.
const float4 g_DiffuseModulation                : register(PSREG_DIFFUSE_MODULATION); // Necessary for lightmaps.
const float4 g_ShadowTweaks                     : register(PSREG_ENVMAP_TINT__SHADOW_TWEAKS); // Necessary for flashlight.
const float3 cAmbientCube[6]                    : register(PSREG_AMBIENT_CUBE); // Necessary for ambient cube.
const float4 g_EyePos                           : register(PSREG_EYEPOS_SPEC_EXPONENT); // Necessary for lighting.
const float4 g_FogParams                        : register(PSREG_FOG_PARAMS); // Necessary for fog.
const float4 g_FlashlightAttenuationFactors     : register(PSREG_FLASHLIGHT_ATTENUATION); // Necessary for flashlight.
const float4 g_FlashlightPos                    : register(PSREG_FLASHLIGHT_POSITION_RIM_BOOST); // Necessary for flashlight.
const float4x4 g_FlashlightWorldToTexture       : register(PSREG_FLASHLIGHT_TO_WORLD_TEXTURE); // Necessary for flashlight.
PixelShaderLightInfo cLightInfo[3]              : register(PSREG_LIGHT_INFO_ARRAY); // Necessary for dynamic lighting - 2 registers each - 6 registers total (4th light spread across w's).

// Samplers.
sampler AlbedoSampler : register(s0);
sampler NormalSampler : register(s1);
sampler MraoSampler : register(s2);
sampler EmissiveSampler : register(s3);
sampler EnvmapSampler : register(s4);
sampler FlashlightSampler : register(s5);
sampler ShadowDepthSampler : register(s6);
sampler RandRotSampler : register(s7);
sampler LightmapSampler : register(s8); // Also uses sampler 9 and 10.

// Statics.
static const float PI = 3.141592;
static const float ONE_OVER_PI = 0.318309;
static const float EPSILON = 0.00001;
static const float ENV_MAP_LOD = 6.0;

// Shlick's approximation of the Fresnel factor.
float3 fresnelSchlick(float3 F0, float cosTheta)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

// GGX/Towbridge-Reitz normal distribution function.
// Uses Disney's reparametrization of alpha = roughness^2.
float ndfGGX(float cosLh, float roughness)
{
    float alpha = roughness * roughness;
    float alphaSq = alpha * alpha;

    float denom = (cosLh * cosLh) * (alphaSq - 1.0) + 1.0;
    return alphaSq / (PI * denom * denom);
}

// Single term for separable Schlick-GGX below.
float gaSchlickG1(float cosTheta, float k)
{
    return cosTheta / (cosTheta * (1.0 - k) + k);
}

// Schlick-GGX approximation of geometric attenuation function using Smith's method.
float gaSchlickGGX(float cosLi, float cosLo, float roughness)
{
    float r = roughness + 1.0;
    float k = (r * r) / 8.0; // Epic suggests using this roughness remapping for analytic lights.
    return gaSchlickG1(cosLi, k) * gaSchlickG1(cosLo, k);
}

// Monte Carlo integration, approximate analytic version based on Dimitar Lazarov's work.
// https://www.unrealengine.com/en-US/blog/physically-based-shading-on-mobile
float3 EnvBRDFApprox(float3 SpecularColor, float Roughness, float NoV)
{
    const float4 c0 = { -1, -0.0275, -0.572, 0.022 };
    const float4 c1 = { 1, 0.0425, 1.04, -0.04 };
    float4 r = Roughness * c0 + c1;
    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
    float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
    return SpecularColor * AB.x + AB.y;
}

// Compute the matrix used to transform tangent space normals to world space.
// We're doing this in the pixel shader because it's more accurate.
float3x3 ComputeTangentFrame(float3 N, float3 P, float2 uv, out float sign_det)
{
    float3 dp1 = ddx(P);
    float3 dp2 = ddy(P);
    float2 duv1 = ddx(uv);
    float2 duv2 = ddy(uv);

    sign_det = dot(dp2, cross(N, dp1)) > 0.0 ? -1 : 1;

    float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
    float2x3 inverseM = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
    float3 T = normalize(mul(float2(duv1.x, duv2.x), inverseM));
    float3 B = normalize(mul(float2(duv1.y, duv2.y), inverseM));
    return float3x3(T, B, N);
}

// Get attenuation of a light source
// This shader version evaluates if() statements even after returning,
// so all of this #if nonsense actually serves a purpose.
float GetAttenForLight(float4 lightAtten, uint lightNum)
{
#if (NUM_LIGHTS > 1)
    if (lightNum == 1) return lightAtten.y;
#endif

#if (NUM_LIGHTS > 2)
    if (lightNum == 2) return lightAtten.z;
#endif

#if (NUM_LIGHTS > 3)
    if (lightNum == 3) return lightAtten.w;
#endif

    return lightAtten.x;
}

// Calculate direct light for one source.
float3 calculateLight(float3 lightIn, float3 lightIntensity, float3 lightOut, float3 normal, float3 fresnelReflectance, float roughness, float metalness, float lightDirectionAngle, float3 albedo)
{
    // Lh
    float3 HalfAngle = normalize(lightIn + lightOut);
    float cosLightIn = max(0.0, dot(normal, lightIn));
    float cosHalfAngle = max(0.0, dot(normal, HalfAngle));

    // F - Calculate Fresnel term for direct lighting.
    float3 F = fresnelSchlick(fresnelReflectance, max(0.0, dot(HalfAngle, lightOut)));

    // D - Calculate normal distribution for specular BRDF.
    float D = ndfGGX(cosHalfAngle, roughness);

    // Calculate geometric attenuation for specular BRDF.
    float G = gaSchlickGGX(cosLightIn, lightDirectionAngle, roughness);

    // Cook-Torrance specular microfacet BRDF.
    float3 specularBRDF = (F * D * G) / max(EPSILON, 4.0 * cosLightIn * lightDirectionAngle);

    // Diffuse scattering happens due to light being refracted multiple times by a dielectric medium.
    // Metals on the other hand either reflect or absorb energy so diffuse contribution is always, zero.
    // To be energy conserving we must scale diffuse BRDF contribution based on Fresnel factor & metalness.
    float3 kd = lerp(1 - F, 0, metalness);

    float3 diffuseBRDF = kd * albedo;

    return (diffuseBRDF + specularBRDF) * lightIntensity * cosLightIn;
}

// Get ambient cube or lightmap color.
float3 ambientLookup(float3 normal, float3 textureNormal, float4 lightmapTexCoord1And2, float4 lightmapTexCoord3)
{
#if LIGHTMAPPED
    float2 bumpCoord1;
    float2 bumpCoord2;
    float2 bumpCoord3;

    ComputeBumpedLightmapCoordinates(
            lightmapTexCoord1And2, lightmapTexCoord3.xy,
            bumpCoord1, bumpCoord2, bumpCoord3);

    float3 lightmapColor1 = LightMapSample(LightmapSampler, bumpCoord1);
    float3 lightmapColor2 = LightMapSample(LightmapSampler, bumpCoord2);
    float3 lightmapColor3 = LightMapSample(LightmapSampler, bumpCoord3);

    float3 dp;
    dp.x = saturate(dot(textureNormal, bumpBasis[0]));
    dp.y = saturate(dot(textureNormal, bumpBasis[1]));
    dp.z = saturate(dot(textureNormal, bumpBasis[2]));
    dp *= dp;

    float3 diffuseLighting =    dp.x * lightmapColor1 +
                                dp.y * lightmapColor2 +
                                dp.z * lightmapColor3;
                                
    float sum = dot(dp, float3(1, 1, 1));
    diffuseLighting *= g_DiffuseModulation / sum;
    return diffuseLighting;
#else
    return PixelShaderAmbientLight(normal, cAmbientCube);
#endif
}

// shader input
struct PS_INPUT
{
    float2 baseTexCoord             : TEXCOORD0;
    float4 lightAtten               : TEXCOORD1;
    float3 worldNormal              : TEXCOORD2;
    float3 worldPos                 : TEXCOORD3;
    float3 projPos                  : TEXCOORD4;
    float3 localPos                 : TEXCOORD5;
    float4 lightmapTexCoord1And2    : TEXCOORD6;
    float4 lightmapTexCoord3        : TEXCOORD7;
};

// Entry point.
float4 main(PS_INPUT i) : COLOR
{
    float4 baseColor = tex2D(AlbedoSampler, i.baseTexCoord);
    float3 albedo = baseColor.rgb;
    float alpha = baseColor.a;
    float3 mrao = tex2D(MraoSampler, i.baseTexCoord);
    float metalness = mrao.x;
    float roughness = mrao.y;
    float ambientOcclusion = mrao.z;
    float3 emission = tex2D(EmissiveSampler, i.baseTexCoord).rgb;

    float3 surfNormal = normalize(i.worldNormal);
    float flipSign;
    float3x3 normalBasis = ComputeTangentFrame(surfNormal, i.worldPos, i.baseTexCoord, flipSign);
    float3 textureNormal = normalize((tex2D(NormalSampler, i.baseTexCoord).xyz - 0.5) * 2);
    float3 normal = normalize(mul(textureNormal, normalBasis));
    textureNormal.y *= flipSign; // Fix texture normal for ambient lighting.

    float3 outgoingLightDirection = normalize(g_EyePos.xyz - i.worldPos); // Lo
    float lightDirectionAngle = max(0, dot(normal, outgoingLightDirection)); // cosLo

    float3 specularReflectionVector = 2.0 * lightDirectionAngle * normal - outgoingLightDirection; // Lr

    float3 dielectricCoefficient = 0.04; // F0dielectric
    float3 fresnelReflectance = lerp(dielectricCoefficient, albedo, metalness); // F0

    // Start ambient.
    float3 ambientLighting = 0.0;
    {
        float3 diffuseIrradiance = ambientLookup(normal, textureNormal, i.lightmapTexCoord1And2, i.lightmapTexCoord1And2);
        float3 ambientLightingFresnelTerm = fresnelSchlick(fresnelReflectance, lightDirectionAngle); // F
        float3 diffuseContributionFactor = lerp(1 - ambientLightingFresnelTerm, 0, metalness); // kd
        float3 diffuseAmbient = diffuseContributionFactor * albedo * diffuseIrradiance;

        float4 specularUV = float4(specularReflectionVector, sqrt(roughness) * ENV_MAP_LOD);
        float3 specularIrradiance = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, specularUV).xyz;
        float3 specularAmbient = specularIrradiance * EnvBRDFApprox(fresnelReflectance, roughness, lightDirectionAngle);

        ambientLighting = (diffuseAmbient + specularAmbient) * ambientOcclusion;
    }
    // End ambient.

    // Start direct.
    float3 directLighting = 0.0;
    for (uint n = 0; n < NUM_LIGHTS; ++n)
    {
        float3 LightIn = normalize(PixelShaderGetLightVector(i.worldPos, cLightInfo, n));
        float3 LightColor = PixelShaderGetLightColor(cLightInfo, n) * GetAttenForLight(i.lightAtten, n); // Li

        directLighting += calculateLight(LightIn, LightColor, outgoingLightDirection, normal,
                fresnelReflectance, roughness, metalness, lightDirectionAngle, albedo);
    }
    // End direct.

    // Start flashlight.
#if (FLASHLIGHT > 0)
    {
        float4 flashlightSpacePosition = mul(float4(i.worldPos, 1.0), g_FlashlightWorldToTexture);
        float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;

        float3 delta = g_FlashlightPos.xyz - i.worldPos;
        float distSquared = dot(delta, delta);
        float dist = sqrt(distSquared);

        float flashlightShadow = DoFlashlightShadow(ShadowDepthSampler, RandRotSampler, vProjCoords, i.projPos.xy, FLASHLIGHTDEPTHFILTERMODE, g_ShadowTweaks, true);
        // Blend between fully attenuated and not attenuated.
        float flashlightAttenuated = lerp(flashlightShadow, 1.0, g_ShadowTweaks.y);
        float fAtten = saturate(dot(g_FlashlightAttenuationFactors.xyz, float3(1.0, 1.0 / dist, 1.0 / distSquared)));
        // Blend between shadow and above, according to light attenuation.
        flashlightShadow = saturate(lerp(flashlightAttenuated, flashlightShadow, fAtten));

        float3 flashlightColor = tex2D(FlashlightSampler, vProjCoords.xy);
        float farZ = g_FlashlightAttenuationFactors.w;
        float endFalloffFactor = RemapValClamped(dist, farZ, 0.6 * farZ, 0.0, 1.0);

        float3 flashLightIntensity = flashlightColor * flashlightShadow * endFalloffFactor;

        float3 flashLightIn = normalize(g_FlashlightPos.xyz - i.worldPos);

        directLighting += max(0, calculateLight(flashLightIn, flashLightIntensity, outgoingLightDirection,
                normal, fresnelReflectance, roughness, metalness, lightDirectionAngle, albedo));
    }
#endif
    // End flashlight.

    float fogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos.z, i.worldPos.z, i.projPos.z);

#if WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)
    alpha = fogFactor;
#endif

    bool bWriteDepthToAlpha = (WRITE_DEPTH_TO_DESTALPHA != 0) && (WRITEWATERFOGTODESTALPHA == 0);

    float3 combinedLighting = directLighting + ambientLighting + emission;

    return FinalOutput(float4(combinedLighting, alpha), fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, i.projPos.z);
}
