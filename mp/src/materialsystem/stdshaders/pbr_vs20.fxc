//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Physically Based Rendering shader for brushes and models
//
//==================================================================================================

// static combos
// STATIC: "LIGHTMAPPED"                "0..1"

// dynamic combos
// DYNAMIC: "SKINNING"                  "0..1"
// DYNAMIC: "COMPRESSED_VERTS"          "0..1"
// DYNAMIC: "DOWATERFOG"                "0..1"
// DYNAMIC: "LIGHTING_PREVIEW"          "0..1"
// DYNAMIC: "NUM_LIGHTS"                "0..4"

// getting rid of the blue squiggles
#ifndef LIGHTMAPPED
#define LIGHTMAPPED 0
#endif//LIGHTMAPPED
#ifndef SKINNING
#define SKINNING 0
#endif//SKINNING
#ifndef COMPRESSED_VERTS
#define COMPRESSED_VERTS 0
#endif//COMPRESSED_VERTS
#ifndef DOWATERFOG
#define DOWATERFOG 0
#endif//DOWATERFOG
#ifndef LIGHTING_PREVIEW
#define LIGHTING_PREVIEW 0
#endif//LIGHTING_PREVIEW
#ifndef NUM_LIGHTS
#define NUM_LIGHTS 0
#endif//NUM_LIGHTS

// includes
#include "common_vs_fxc.h"

// shader specific constants
const float4 cBaseTexCoordTransform[2] : register(SHADER_SPECIFIC_CONST_0);

// shader input
struct VS_INPUT
{
    // this is all of the stuff that we ever use
    float4 vPos                     : POSITION;
    float4 vNormal                  : NORMAL;
    float4 vBoneWeights             : BLENDWEIGHT;
    float4 vBoneIndices             : BLENDINDICES;
    float2 vTexCoord0               : TEXCOORD0;
    float2 vLightmapTexCoord        : TEXCOORD1;
    float2 vLightmapTexCoordOffset  : TEXCOORD2;
};

// shader output
struct VS_OUTPUT
{
    // stuff that isn't seen by the pixel shader
    float4 projPosSetup             : POSITION;
    float fog                       : FOG;
    // stuff that is seen by the pixel shader
    float2 baseTexCoord             : TEXCOORD0;
    float4 lightAtten               : TEXCOORD1;
    float3 worldNormal              : TEXCOORD2;
    float3 worldPos                 : TEXCOORD3;
    float3 projPos                  : TEXCOORD4;
    float3 localPos                 : TEXCOORD5;
    float4 lightmapTexCoord1And2    : TEXCOORD6;
    float4 lightmapTexCoord3        : TEXCOORD7;
};

// entry point
VS_OUTPUT main(const VS_INPUT v)
{
    VS_OUTPUT o = (VS_OUTPUT) 0;

    float4 vPosition = v.vPos;
    float3 vNormal;
    DecompressVertex_Normal(v.vNormal, vNormal);

    float3 worldPos, worldNormal;
    SkinPositionAndNormal(SKINNING, vPosition, vNormal, v.vBoneWeights, v.vBoneIndices, worldPos, worldNormal);
    worldNormal = normalize(worldNormal);

    // transform into projection space
    float4 vProjPos = mul(float4(worldPos, 1), cViewProj);
    o.projPosSetup = vProjPos;
    vProjPos.z = dot(float4(worldPos, 1), cViewProjZ);

    o.projPos = vProjPos.xyz;
    o.fog = CalcFog(worldPos, vProjPos.xyz, DOWATERFOG);

    // needed for water fog alpha and diffuse lighting 
    o.worldPos = worldPos;
    o.worldNormal.xyz = worldNormal.xyz;

    // scalar attenuations for four lights
    o.lightAtten = float4(0, 0, 0, 0);

#if (NUM_LIGHTS > 0)
    o.lightAtten.x = GetVertexAttenForLight(worldPos, 0, false);
#endif

#if (NUM_LIGHTS > 1)
    o.lightAtten.y = GetVertexAttenForLight(worldPos, 1, false);
#endif

#if (NUM_LIGHTS > 2)
    o.lightAtten.z = GetVertexAttenForLight(worldPos, 2, false);
#endif

#if (NUM_LIGHTS > 3)
    o.lightAtten.w = GetVertexAttenForLight(worldPos, 3, false);
#endif

    // base texture coordinate transform
    o.baseTexCoord.x = dot(v.vTexCoord0, cBaseTexCoordTransform[0].xy);
    o.baseTexCoord.y = dot(v.vTexCoord0, cBaseTexCoordTransform[1].xy);

#if LIGHTMAPPED
    o.lightmapTexCoord3.z = dot(v.vTexCoord0, cBaseTexCoordTransform[0].xy) + cBaseTexCoordTransform[0].w;
    o.lightmapTexCoord3.w = dot(v.vTexCoord0, cBaseTexCoordTransform[1].xy) + cBaseTexCoordTransform[1].w;
    o.lightmapTexCoord1And2.xy = v.vLightmapTexCoord + v.vLightmapTexCoordOffset;

    float2 lightmapTexCoord2 = o.lightmapTexCoord1And2.xy + v.vLightmapTexCoordOffset;
    float2 lightmapTexCoord3 = lightmapTexCoord2 + v.vLightmapTexCoordOffset;

    // Reversed component order
    o.lightmapTexCoord1And2.w = lightmapTexCoord2.x;
    o.lightmapTexCoord1And2.z = lightmapTexCoord2.y;

    o.lightmapTexCoord3.xy = lightmapTexCoord3;
#endif // LIGHTMAPPED

    return o;
}
